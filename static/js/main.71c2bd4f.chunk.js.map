{"version":3,"sources":["modules/board/components/Board.js","App.js","serviceWorker.js","index.js"],"names":["shuffle","array","temp","index","counter","length","Math","floor","random","data","value","color","Board","props","useState","boardData","setBoardData","className","map","style","backgroundColor","onClick","sort","a","b","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAGMA,G,MAAU,SAACC,GAGb,IAFA,IAA4BC,EAAMC,EAA9BC,EAAUH,EAAMI,OAEbD,EAAU,GAEbD,EAAQG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEnCF,EAAOD,IADPG,GAEAH,EAAMG,GAAWH,EAAME,GACvBF,EAAME,GAASD,EAEnB,OAAOD,IAULQ,EAAOT,EANC,CAAC,CAACU,MAAO,EAAGC,MAAM,WAAW,CAACD,MAAO,EAAGC,MAAM,WAAW,CAACD,MAAO,EAAGC,MAAM,WACxF,CAACD,MAAO,EAAGC,MAAM,WAAW,CAACD,MAAO,EAAGC,MAAM,WAAW,CAACD,MAAO,EAAGC,MAAM,WACzE,CAACD,MAAO,EAAGC,MAAM,WAAW,CAACD,MAAO,EAAGC,MAAM,WAAW,CAACD,MAAO,EAAGC,MAAM,aAqD1DC,EAhDD,SAACC,GAAU,IAAD,EACcC,mBAASL,GADvB,mBACbM,EADa,KACFC,EADE,KAiBpB,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,UAAf,oBAGA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACbF,EAAUG,KAAI,SAACR,EAAOP,GACpB,OAAO,yBAAKc,UAAU,iBACd,yBAAKA,UAAU,aACdP,EAAMA,OAEP,yBAAKO,UAAU,WAAWE,MAAO,CAACC,gBAAiBV,EAAMC,QACrD,+BAAQD,EAAMA,aAM/B,yBAAKO,UAAU,oBACX,4BAAQA,UAAU,SAASI,QAlCrB,WACNrB,EAAQe,GACnBC,GAAa,SAAAP,GAAI,mBAAQA,QAgCd,WACA,4BAAQQ,UAAU,SAASI,QA7BxB,WACHN,EAAUO,MAAK,SAACC,EAAEC,GACzB,OAAID,EAAEb,MAAQc,EAAEd,MAAc,EAC1Bc,EAAEd,MAAQa,EAAEb,OAAe,EACxB,KAEXM,GAAa,SAAAP,GAAI,mBAAQA,QAuBd,UAGX,yBAAKQ,UAAU,oBACX,sDAnDC,kBCJEQ,MARf,WACE,OACI,6BACI,kBAAC,EAAD,QCKUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAED,kBAAC,EAAD,MACFC,SAASC,eAAe,SDwHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.71c2bd4f.chunk.js","sourcesContent":["import React, {useState }from 'react';\nimport '../styles/index.scss';\n\nconst shuffle = (array) =>{\n    let counter = array.length, temp, index;\n\n    while (counter > 0) {\n\n        index = Math.floor(Math.random() * counter);\n        counter--;\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n    return array;\n}\nconst user = \"Udhayakumar\";\n\nconst array = [{value: 1, color:\"#6F98A8\"},{value: 2, color:\"#2B8EAD\"},{value: 3, color:\"#333333\"},\n{value: 4, color:\"#2B8EAD\"},{value: 5, color:\"#333333\"},{value: 6, color:\"#BFBFBF\"},\n{value: 7, color:\"#BFBFBF\"},{value: 8, color:\"#6F98A8\"},{value: 9, color:\"#333333\"}\n];\n\n\nconst data = shuffle(array);\nconst Board = (props) =>{\n    const [boardData, setBoardData] = useState(data);\n\n    const shuffleBoard = ()=>{\n        let data = shuffle(boardData);\n        setBoardData(data =>([...data]));\n        \n    }\n\n    const sortBoard = ()=>{\n        let data = boardData.sort((a,b)=>{\n            if (a.value > b.value) return 1;\n            if (b.value > a.value) return -1;\n            return 0;\n        }) \n        setBoardData(data =>([...data]));\n    }\n    return(\n        <div className=\"board-container\">\n            <div className=\"header\">\n                Shuffle and Sort\n            </div>\n            <div className=\"content\">\n                <div className=\"board\"> \n                { boardData.map((value, index) =>{\n                    return <div className=\"box-container\">\n                            <div className=\"board-box\">\n                            {value.value}\n                            </div>\n                            <div className=\"left-bar\" style={{backgroundColor: value.color}}>\n                                <label>{value.value}</label>\n                            </div>\n                        </div>\n                    })\n                 }\n               </div>\n               <div className=\"button-container\">\n                   <button className=\"button\" onClick={shuffleBoard}>Shuffle</button>\n                   <button className=\"button\" onClick={sortBoard}>Sort</button>\n               </div>\n        </div>\n        <div className=\"bottom-container\">\n            <label>Shuffle and sort by {user}</label>\n        </div>\n        </div>\n    )\n}\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './modules/board/components/Board';\n\nfunction App() {\n  return (\n      <div>\n          <Board/>  \n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    \n        <App />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}